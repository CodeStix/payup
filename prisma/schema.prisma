// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentMethod {
  MOLLIE
  IBAN
}

model User {
  id                          Int           @id @default(autoincrement())
  userName                    String?
  email                       String        @unique
  registerDate                DateTime      @default(now())
  lastLoginDate               DateTime      @default(now())
  avatarUrl                   String?
  iban                        String?
  mollieApiKey                String?
  allowOtherUserManualTranser Boolean       @default(true)
  preferredPaymentMethod      PaymentMethod @default(IBAN)
  verifiedPaymentMethod       Boolean       @default(false)

  paymentRequests PaymentRequest[]       @relation("owner")
  requestedToPay  PaymentRequestToUser[]
  paidRequests    PaymentRequest[]       @relation("paid")

  // This user has initiated a connection to these users
  requesters UserToUser[] @relation("requesters")
  // This user is related to because they initiated a connected to this user
  responders UserToUser[] @relation("responders")

  firstUserBalances  RelativeUserBalance[] @relation("relativeBalanceMoneyHolder")
  secondUserBalances RelativeUserBalance[] @relation("relativeBalanceMoneyReceiver")
  // holdsMoneyFromCheckReminder         PaymentCheckReminder[] @relation("paymentCheckReminderMoneyHolder")
  // shouldReceiveMoneyFromCheckReminder PaymentCheckReminder[] @relation("paymentCheckReminderMoneyReceiver")
}

model UserToUser {
  requester   User @relation(fields: [requesterId], references: [id], name: "requesters", onDelete: Cascade)
  requesterId Int
  responder   User @relation(fields: [responderId], references: [id], name: "responders", onDelete: Cascade)
  responderId Int

  @@id([requesterId, responderId])
}

model PaymentRequestToUser {
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  paymentRequest   PaymentRequest @relation(fields: [paymentRequestId], references: [id], onDelete: Cascade)
  paymentRequestId String

  partsOfAmount Int @default(1)

  createdDate DateTime @default(now())

  @@id([userId, paymentRequestId])
}

model PaymentRequest {
  id             String   @id @default(uuid())
  name           String
  description    String
  createdDate    DateTime @default(now())
  lastUpdateDate DateTime @default(now())
  amount         Float    @default(0)
  published      Boolean  @default(true)

  paidBy     User                   @relation(fields: [paidById], references: [id], name: "paid", onDelete: Cascade)
  paidById   Int
  usersToPay PaymentRequestToUser[]

  owner   User @relation(fields: [ownerId], references: [id], name: "owner")
  ownerId Int

  relatesToUserBalances RelativeUserBalance[]
}

model RelativeUserBalance {
  firstUser    User @relation(fields: [firstUserId], references: [id], name: "relativeBalanceMoneyHolder")
  firstUserId  Int
  secondUser   User @relation(fields: [secondUserId], references: [id], name: "relativeBalanceMoneyReceiver")
  secondUserId Int

  // The amount that secondUser should receive from firstUser
  amount                       Float           @default(0)
  lastUpdatedDate              DateTime        @default(now())
  paymentPageOpenedDate        DateTime?
  lastPaymentDate              DateTime?
  lastNotificationDate         DateTime?
  lastReminderNotificationDate DateTime?
  lastReminderOpenedDate       DateTime?
  lastRelatingPaymentRequest   PaymentRequest? @relation(fields: [lastRelatingPaymentRequestId], references: [id])
  lastRelatingPaymentRequestId String?

  currentMolliePaymentId String?

  @@id([firstUserId, secondUserId])
}

// model PaymentCheckReminder {
//   id                   Int       @id @default(autoincrement())
//   lastNotificationDate DateTime?

//   moneyHolder     User @relation(fields: [moneyHolderId], references: [id], name: "paymentCheckReminderMoneyHolder")
//   moneyHolderId   Int
//   moneyReceiver   User @relation(fields: [moneyReceiverId], references: [id], name: "paymentCheckReminderMoneyReceiver")
//   moneyReceiverId Int

//   // true if paid, false if didn't pay and null if didn't answer
//   confirmed  Boolean?
//   paidDate   DateTime
//   paidAmount Float
// }
