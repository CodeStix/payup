// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  userName      String?
  email         String   @unique
  registerDate  DateTime @default(now())
  lastLoginDate DateTime @default(now())
  avatarUrl     String?
  iban          String?
  mollieApiKey  String?

  paymentRequests PaymentRequest[]       @relation("owner")
  requestedToPay  PaymentRequestToUser[]
  paidRequests    PaymentRequest[]       @relation("paid")

  // This user has initiated a connection to these users
  requesters UserToUser[] @relation("requesters")
  // This user is related to because they initiated a connected to this user
  responders UserToUser[] @relation("responders")

  receivedLinks PaymentLink[] @relation("receivingLinkUser")
  sentLinks     PaymentLink[] @relation("sendingLinkUser")

  relativeBalanceFirstUsers  RelativeUserBalance[] @relation("relativeBalanceFirstUser")
  relativeBalanceSecondUsers RelativeUserBalance[] @relation("relativeBalanceSecondUser")
}

model UserToUser {
  requester   User @relation(fields: [requesterId], references: [id], name: "requesters", onDelete: Cascade)
  requesterId Int
  responder   User @relation(fields: [responderId], references: [id], name: "responders", onDelete: Cascade)
  responderId Int

  @@id([requesterId, responderId])
}

model PaymentRequestToUser {
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  paymentRequest   PaymentRequest @relation(fields: [paymentRequestId], references: [id], onDelete: Cascade)
  paymentRequestId String

  partsOfAmount Int @default(1)

  createdDate DateTime @default(now())

  @@id([userId, paymentRequestId])
}

model PaymentRequest {
  id          String   @id @default(uuid())
  name        String
  description String
  createdDate DateTime @default(now())
  amount      Float    @default(0)

  paidBy     User                   @relation(fields: [paidById], references: [id], name: "paid", onDelete: Cascade)
  paidById   Int
  usersToPay PaymentRequestToUser[]

  owner   User @relation(fields: [ownerId], references: [id], name: "owner")
  ownerId Int
}

model RelativeUserBalance {
  firstUser    User @relation(fields: [firstUserId], references: [id], name: "relativeBalanceFirstUser")
  firstUserId  Int
  secondUser   User @relation(fields: [secondUserId], references: [id], name: "relativeBalanceSecondUser")
  secondUserId Int

  amount               Float     @default(0)
  lastPaymentDate      DateTime?
  lastNotificationDate DateTime?

  @@id([firstUserId, secondUserId])
}

model PaymentLink {
  id                      String    @id @default(uuid())
  paid                    Boolean
  paidDate                DateTime?
  amount                  Float
  amountPerPaymentRequest Json
  receivingUser           User      @relation(fields: [receivingUserId], references: [id], name: "receivingLinkUser", onDelete: Cascade)
  receivingUserId         Int
  sendingUser             User      @relation(fields: [sendingUserId], references: [id], name: "sendingLinkUser", onDelete: Cascade)
  sendingUserId           Int

  paymentMethod   String  @default("iban")
  molliePaymentId String?

  createdDate DateTime @default(now())
}
